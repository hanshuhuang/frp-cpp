// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace frp {
class AddConnReq;
struct AddConnReqDefaultTypeInternal;
extern AddConnReqDefaultTypeInternal _AddConnReq_default_instance_;
class AddConnRsp;
struct AddConnRspDefaultTypeInternal;
extern AddConnRspDefaultTypeInternal _AddConnRsp_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class LocalProxy;
struct LocalProxyDefaultTypeInternal;
extern LocalProxyDefaultTypeInternal _LocalProxy_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
struct LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class Msg;
struct MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
class ProxyConf;
struct ProxyConfDefaultTypeInternal;
extern ProxyConfDefaultTypeInternal _ProxyConf_default_instance_;
}  // namespace frp
PROTOBUF_NAMESPACE_OPEN
template<> ::frp::AddConnReq* Arena::CreateMaybeMessage<::frp::AddConnReq>(Arena*);
template<> ::frp::AddConnRsp* Arena::CreateMaybeMessage<::frp::AddConnRsp>(Arena*);
template<> ::frp::Config* Arena::CreateMaybeMessage<::frp::Config>(Arena*);
template<> ::frp::LocalProxy* Arena::CreateMaybeMessage<::frp::LocalProxy>(Arena*);
template<> ::frp::LoginReq* Arena::CreateMaybeMessage<::frp::LoginReq>(Arena*);
template<> ::frp::LoginRsp* Arena::CreateMaybeMessage<::frp::LoginRsp>(Arena*);
template<> ::frp::Msg* Arena::CreateMaybeMessage<::frp::Msg>(Arena*);
template<> ::frp::ProxyConf* Arena::CreateMaybeMessage<::frp::ProxyConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frp {

enum MsgType : int {
  MSGTYPE_UNKNOWN = 0,
  MSGTYPE_LOGIN_REQ = 1,
  MSGTYPE_LOGIN_RSP = 2,
  MSGTYPE_ADD_CONN_REQ = 3,
  MSGTYPE_ADD_CONN_RSP = 4,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = MSGTYPE_UNKNOWN;
constexpr MsgType MsgType_MAX = MSGTYPE_ADD_CONN_RSP;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum Protocol : int {
  TCP = 0,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = TCP;
constexpr Protocol Protocol_MAX = TCP;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
// ===================================================================

class Msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frp.Msg) */ {
 public:
  inline Msg() : Msg(nullptr) {}
  ~Msg() override;
  explicit constexpr Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg(const Msg& from);
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg& operator=(Msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg* New() const final {
    return new Msg();
  }

  Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frp.Msg";
  }
  protected:
  explicit Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginReqFieldNumber = 2,
    kLoginRspFieldNumber = 3,
    kAddConnReqFieldNumber = 4,
    kAddConnRspFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // .frp.LoginReq loginReq = 2;
  bool has_loginreq() const;
  private:
  bool _internal_has_loginreq() const;
  public:
  void clear_loginreq();
  const ::frp::LoginReq& loginreq() const;
  PROTOBUF_MUST_USE_RESULT ::frp::LoginReq* release_loginreq();
  ::frp::LoginReq* mutable_loginreq();
  void set_allocated_loginreq(::frp::LoginReq* loginreq);
  private:
  const ::frp::LoginReq& _internal_loginreq() const;
  ::frp::LoginReq* _internal_mutable_loginreq();
  public:
  void unsafe_arena_set_allocated_loginreq(
      ::frp::LoginReq* loginreq);
  ::frp::LoginReq* unsafe_arena_release_loginreq();

  // .frp.LoginRsp loginRsp = 3;
  bool has_loginrsp() const;
  private:
  bool _internal_has_loginrsp() const;
  public:
  void clear_loginrsp();
  const ::frp::LoginRsp& loginrsp() const;
  PROTOBUF_MUST_USE_RESULT ::frp::LoginRsp* release_loginrsp();
  ::frp::LoginRsp* mutable_loginrsp();
  void set_allocated_loginrsp(::frp::LoginRsp* loginrsp);
  private:
  const ::frp::LoginRsp& _internal_loginrsp() const;
  ::frp::LoginRsp* _internal_mutable_loginrsp();
  public:
  void unsafe_arena_set_allocated_loginrsp(
      ::frp::LoginRsp* loginrsp);
  ::frp::LoginRsp* unsafe_arena_release_loginrsp();

  // .frp.AddConnReq addConnReq = 4;
  bool has_addconnreq() const;
  private:
  bool _internal_has_addconnreq() const;
  public:
  void clear_addconnreq();
  const ::frp::AddConnReq& addconnreq() const;
  PROTOBUF_MUST_USE_RESULT ::frp::AddConnReq* release_addconnreq();
  ::frp::AddConnReq* mutable_addconnreq();
  void set_allocated_addconnreq(::frp::AddConnReq* addconnreq);
  private:
  const ::frp::AddConnReq& _internal_addconnreq() const;
  ::frp::AddConnReq* _internal_mutable_addconnreq();
  public:
  void unsafe_arena_set_allocated_addconnreq(
      ::frp::AddConnReq* addconnreq);
  ::frp::AddConnReq* unsafe_arena_release_addconnreq();

  // .frp.AddConnRsp addConnRsp = 5;
  bool has_addconnrsp() const;
  private:
  bool _internal_has_addconnrsp() const;
  public:
  void clear_addconnrsp();
  const ::frp::AddConnRsp& addconnrsp() const;
  PROTOBUF_MUST_USE_RESULT ::frp::AddConnRsp* release_addconnrsp();
  ::frp::AddConnRsp* mutable_addconnrsp();
  void set_allocated_addconnrsp(::frp::AddConnRsp* addconnrsp);
  private:
  const ::frp::AddConnRsp& _internal_addconnrsp() const;
  ::frp::AddConnRsp* _internal_mutable_addconnrsp();
  public:
  void unsafe_arena_set_allocated_addconnrsp(
      ::frp::AddConnRsp* addconnrsp);
  ::frp::AddConnRsp* unsafe_arena_release_addconnrsp();

  // .frp.MsgType type = 1;
  void clear_type();
  ::frp::MsgType type() const;
  void set_type(::frp::MsgType value);
  private:
  ::frp::MsgType _internal_type() const;
  void _internal_set_type(::frp::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:frp.Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::frp::LoginReq* loginreq_;
  ::frp::LoginRsp* loginrsp_;
  ::frp::AddConnReq* addconnreq_;
  ::frp::AddConnRsp* addconnrsp_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frp.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit constexpr LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return new LoginReq();
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frp.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // .frp.Config config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::frp::Config& config() const;
  PROTOBUF_MUST_USE_RESULT ::frp::Config* release_config();
  ::frp::Config* mutable_config();
  void set_allocated_config(::frp::Config* config);
  private:
  const ::frp::Config& _internal_config() const;
  ::frp::Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::frp::Config* config);
  ::frp::Config* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:frp.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::frp::Config* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frp.LoginRsp) */ {
 public:
  inline LoginRsp() : LoginRsp(nullptr) {}
  ~LoginRsp() override;
  explicit constexpr LoginRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRsp(const LoginRsp& from);
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRsp* New() const final {
    return new LoginRsp();
  }

  LoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frp.LoginRsp";
  }
  protected:
  explicit LoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kRetCodeFieldNumber = 1,
  };
  // string err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // string client_id = 3;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:frp.LoginRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  int32_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AddConnReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:frp.AddConnReq) */ {
 public:
  inline AddConnReq() : AddConnReq(nullptr) {}
  explicit constexpr AddConnReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddConnReq(const AddConnReq& from);
  AddConnReq(AddConnReq&& from) noexcept
    : AddConnReq() {
    *this = ::std::move(from);
  }

  inline AddConnReq& operator=(const AddConnReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddConnReq& operator=(AddConnReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddConnReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddConnReq* internal_default_instance() {
    return reinterpret_cast<const AddConnReq*>(
               &_AddConnReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddConnReq& a, AddConnReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddConnReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddConnReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddConnReq* New() const final {
    return new AddConnReq();
  }

  AddConnReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddConnReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddConnReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddConnReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frp.AddConnReq";
  }
  protected:
  explicit AddConnReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:frp.AddConnReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AddConnRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frp.AddConnRsp) */ {
 public:
  inline AddConnRsp() : AddConnRsp(nullptr) {}
  ~AddConnRsp() override;
  explicit constexpr AddConnRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddConnRsp(const AddConnRsp& from);
  AddConnRsp(AddConnRsp&& from) noexcept
    : AddConnRsp() {
    *this = ::std::move(from);
  }

  inline AddConnRsp& operator=(const AddConnRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddConnRsp& operator=(AddConnRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddConnRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddConnRsp* internal_default_instance() {
    return reinterpret_cast<const AddConnRsp*>(
               &_AddConnRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddConnRsp& a, AddConnRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddConnRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddConnRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddConnRsp* New() const final {
    return new AddConnRsp();
  }

  AddConnRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddConnRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddConnRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddConnRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddConnRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frp.AddConnRsp";
  }
  protected:
  explicit AddConnRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:frp.AddConnRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  int32_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frp.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit constexpr Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return new Config();
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frp.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalProxiesFieldNumber = 2,
    kProxyConfFieldNumber = 1,
  };
  // repeated .frp.LocalProxy localProxies = 2;
  int localproxies_size() const;
  private:
  int _internal_localproxies_size() const;
  public:
  void clear_localproxies();
  ::frp::LocalProxy* mutable_localproxies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frp::LocalProxy >*
      mutable_localproxies();
  private:
  const ::frp::LocalProxy& _internal_localproxies(int index) const;
  ::frp::LocalProxy* _internal_add_localproxies();
  public:
  const ::frp::LocalProxy& localproxies(int index) const;
  ::frp::LocalProxy* add_localproxies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frp::LocalProxy >&
      localproxies() const;

  // .frp.ProxyConf proxyConf = 1;
  bool has_proxyconf() const;
  private:
  bool _internal_has_proxyconf() const;
  public:
  void clear_proxyconf();
  const ::frp::ProxyConf& proxyconf() const;
  PROTOBUF_MUST_USE_RESULT ::frp::ProxyConf* release_proxyconf();
  ::frp::ProxyConf* mutable_proxyconf();
  void set_allocated_proxyconf(::frp::ProxyConf* proxyconf);
  private:
  const ::frp::ProxyConf& _internal_proxyconf() const;
  ::frp::ProxyConf* _internal_mutable_proxyconf();
  public:
  void unsafe_arena_set_allocated_proxyconf(
      ::frp::ProxyConf* proxyconf);
  ::frp::ProxyConf* unsafe_arena_release_proxyconf();

  // @@protoc_insertion_point(class_scope:frp.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frp::LocalProxy > localproxies_;
  ::frp::ProxyConf* proxyconf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LocalProxy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frp.LocalProxy) */ {
 public:
  inline LocalProxy() : LocalProxy(nullptr) {}
  ~LocalProxy() override;
  explicit constexpr LocalProxy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalProxy(const LocalProxy& from);
  LocalProxy(LocalProxy&& from) noexcept
    : LocalProxy() {
    *this = ::std::move(from);
  }

  inline LocalProxy& operator=(const LocalProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalProxy& operator=(LocalProxy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalProxy& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalProxy* internal_default_instance() {
    return reinterpret_cast<const LocalProxy*>(
               &_LocalProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LocalProxy& a, LocalProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalProxy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalProxy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalProxy* New() const final {
    return new LocalProxy();
  }

  LocalProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalProxy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalProxy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocalProxy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frp.LocalProxy";
  }
  protected:
  explicit LocalProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kProtocolFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .frp.Protocol protocol = 1;
  void clear_protocol();
  ::frp::Protocol protocol() const;
  void set_protocol(::frp::Protocol value);
  private:
  ::frp::Protocol _internal_protocol() const;
  void _internal_set_protocol(::frp::Protocol value);
  public:

  // uint32 port = 3;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:frp.LocalProxy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int protocol_;
  uint32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ProxyConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frp.ProxyConf) */ {
 public:
  inline ProxyConf() : ProxyConf(nullptr) {}
  ~ProxyConf() override;
  explicit constexpr ProxyConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProxyConf(const ProxyConf& from);
  ProxyConf(ProxyConf&& from) noexcept
    : ProxyConf() {
    *this = ::std::move(from);
  }

  inline ProxyConf& operator=(const ProxyConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyConf& operator=(ProxyConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProxyConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProxyConf* internal_default_instance() {
    return reinterpret_cast<const ProxyConf*>(
               &_ProxyConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProxyConf& a, ProxyConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyConf* New() const final {
    return new ProxyConf();
  }

  ProxyConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProxyConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProxyConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frp.ProxyConf";
  }
  protected:
  explicit ProxyConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:frp.ProxyConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  uint32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Msg

// .frp.MsgType type = 1;
inline void Msg::clear_type() {
  type_ = 0;
}
inline ::frp::MsgType Msg::_internal_type() const {
  return static_cast< ::frp::MsgType >(type_);
}
inline ::frp::MsgType Msg::type() const {
  // @@protoc_insertion_point(field_get:frp.Msg.type)
  return _internal_type();
}
inline void Msg::_internal_set_type(::frp::MsgType value) {
  
  type_ = value;
}
inline void Msg::set_type(::frp::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frp.Msg.type)
}

// .frp.LoginReq loginReq = 2;
inline bool Msg::_internal_has_loginreq() const {
  return this != internal_default_instance() && loginreq_ != nullptr;
}
inline bool Msg::has_loginreq() const {
  return _internal_has_loginreq();
}
inline void Msg::clear_loginreq() {
  if (GetArenaForAllocation() == nullptr && loginreq_ != nullptr) {
    delete loginreq_;
  }
  loginreq_ = nullptr;
}
inline const ::frp::LoginReq& Msg::_internal_loginreq() const {
  const ::frp::LoginReq* p = loginreq_;
  return p != nullptr ? *p : reinterpret_cast<const ::frp::LoginReq&>(
      ::frp::_LoginReq_default_instance_);
}
inline const ::frp::LoginReq& Msg::loginreq() const {
  // @@protoc_insertion_point(field_get:frp.Msg.loginReq)
  return _internal_loginreq();
}
inline void Msg::unsafe_arena_set_allocated_loginreq(
    ::frp::LoginReq* loginreq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginreq_);
  }
  loginreq_ = loginreq;
  if (loginreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frp.Msg.loginReq)
}
inline ::frp::LoginReq* Msg::release_loginreq() {
  
  ::frp::LoginReq* temp = loginreq_;
  loginreq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frp::LoginReq* Msg::unsafe_arena_release_loginreq() {
  // @@protoc_insertion_point(field_release:frp.Msg.loginReq)
  
  ::frp::LoginReq* temp = loginreq_;
  loginreq_ = nullptr;
  return temp;
}
inline ::frp::LoginReq* Msg::_internal_mutable_loginreq() {
  
  if (loginreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::frp::LoginReq>(GetArenaForAllocation());
    loginreq_ = p;
  }
  return loginreq_;
}
inline ::frp::LoginReq* Msg::mutable_loginreq() {
  ::frp::LoginReq* _msg = _internal_mutable_loginreq();
  // @@protoc_insertion_point(field_mutable:frp.Msg.loginReq)
  return _msg;
}
inline void Msg::set_allocated_loginreq(::frp::LoginReq* loginreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete loginreq_;
  }
  if (loginreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::frp::LoginReq>::GetOwningArena(loginreq);
    if (message_arena != submessage_arena) {
      loginreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginreq, submessage_arena);
    }
    
  } else {
    
  }
  loginreq_ = loginreq;
  // @@protoc_insertion_point(field_set_allocated:frp.Msg.loginReq)
}

// .frp.LoginRsp loginRsp = 3;
inline bool Msg::_internal_has_loginrsp() const {
  return this != internal_default_instance() && loginrsp_ != nullptr;
}
inline bool Msg::has_loginrsp() const {
  return _internal_has_loginrsp();
}
inline void Msg::clear_loginrsp() {
  if (GetArenaForAllocation() == nullptr && loginrsp_ != nullptr) {
    delete loginrsp_;
  }
  loginrsp_ = nullptr;
}
inline const ::frp::LoginRsp& Msg::_internal_loginrsp() const {
  const ::frp::LoginRsp* p = loginrsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::frp::LoginRsp&>(
      ::frp::_LoginRsp_default_instance_);
}
inline const ::frp::LoginRsp& Msg::loginrsp() const {
  // @@protoc_insertion_point(field_get:frp.Msg.loginRsp)
  return _internal_loginrsp();
}
inline void Msg::unsafe_arena_set_allocated_loginrsp(
    ::frp::LoginRsp* loginrsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginrsp_);
  }
  loginrsp_ = loginrsp;
  if (loginrsp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frp.Msg.loginRsp)
}
inline ::frp::LoginRsp* Msg::release_loginrsp() {
  
  ::frp::LoginRsp* temp = loginrsp_;
  loginrsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frp::LoginRsp* Msg::unsafe_arena_release_loginrsp() {
  // @@protoc_insertion_point(field_release:frp.Msg.loginRsp)
  
  ::frp::LoginRsp* temp = loginrsp_;
  loginrsp_ = nullptr;
  return temp;
}
inline ::frp::LoginRsp* Msg::_internal_mutable_loginrsp() {
  
  if (loginrsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::frp::LoginRsp>(GetArenaForAllocation());
    loginrsp_ = p;
  }
  return loginrsp_;
}
inline ::frp::LoginRsp* Msg::mutable_loginrsp() {
  ::frp::LoginRsp* _msg = _internal_mutable_loginrsp();
  // @@protoc_insertion_point(field_mutable:frp.Msg.loginRsp)
  return _msg;
}
inline void Msg::set_allocated_loginrsp(::frp::LoginRsp* loginrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete loginrsp_;
  }
  if (loginrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::frp::LoginRsp>::GetOwningArena(loginrsp);
    if (message_arena != submessage_arena) {
      loginrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginrsp, submessage_arena);
    }
    
  } else {
    
  }
  loginrsp_ = loginrsp;
  // @@protoc_insertion_point(field_set_allocated:frp.Msg.loginRsp)
}

// .frp.AddConnReq addConnReq = 4;
inline bool Msg::_internal_has_addconnreq() const {
  return this != internal_default_instance() && addconnreq_ != nullptr;
}
inline bool Msg::has_addconnreq() const {
  return _internal_has_addconnreq();
}
inline void Msg::clear_addconnreq() {
  if (GetArenaForAllocation() == nullptr && addconnreq_ != nullptr) {
    delete addconnreq_;
  }
  addconnreq_ = nullptr;
}
inline const ::frp::AddConnReq& Msg::_internal_addconnreq() const {
  const ::frp::AddConnReq* p = addconnreq_;
  return p != nullptr ? *p : reinterpret_cast<const ::frp::AddConnReq&>(
      ::frp::_AddConnReq_default_instance_);
}
inline const ::frp::AddConnReq& Msg::addconnreq() const {
  // @@protoc_insertion_point(field_get:frp.Msg.addConnReq)
  return _internal_addconnreq();
}
inline void Msg::unsafe_arena_set_allocated_addconnreq(
    ::frp::AddConnReq* addconnreq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addconnreq_);
  }
  addconnreq_ = addconnreq;
  if (addconnreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frp.Msg.addConnReq)
}
inline ::frp::AddConnReq* Msg::release_addconnreq() {
  
  ::frp::AddConnReq* temp = addconnreq_;
  addconnreq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frp::AddConnReq* Msg::unsafe_arena_release_addconnreq() {
  // @@protoc_insertion_point(field_release:frp.Msg.addConnReq)
  
  ::frp::AddConnReq* temp = addconnreq_;
  addconnreq_ = nullptr;
  return temp;
}
inline ::frp::AddConnReq* Msg::_internal_mutable_addconnreq() {
  
  if (addconnreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::frp::AddConnReq>(GetArenaForAllocation());
    addconnreq_ = p;
  }
  return addconnreq_;
}
inline ::frp::AddConnReq* Msg::mutable_addconnreq() {
  ::frp::AddConnReq* _msg = _internal_mutable_addconnreq();
  // @@protoc_insertion_point(field_mutable:frp.Msg.addConnReq)
  return _msg;
}
inline void Msg::set_allocated_addconnreq(::frp::AddConnReq* addconnreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete addconnreq_;
  }
  if (addconnreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::frp::AddConnReq>::GetOwningArena(addconnreq);
    if (message_arena != submessage_arena) {
      addconnreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addconnreq, submessage_arena);
    }
    
  } else {
    
  }
  addconnreq_ = addconnreq;
  // @@protoc_insertion_point(field_set_allocated:frp.Msg.addConnReq)
}

// .frp.AddConnRsp addConnRsp = 5;
inline bool Msg::_internal_has_addconnrsp() const {
  return this != internal_default_instance() && addconnrsp_ != nullptr;
}
inline bool Msg::has_addconnrsp() const {
  return _internal_has_addconnrsp();
}
inline void Msg::clear_addconnrsp() {
  if (GetArenaForAllocation() == nullptr && addconnrsp_ != nullptr) {
    delete addconnrsp_;
  }
  addconnrsp_ = nullptr;
}
inline const ::frp::AddConnRsp& Msg::_internal_addconnrsp() const {
  const ::frp::AddConnRsp* p = addconnrsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::frp::AddConnRsp&>(
      ::frp::_AddConnRsp_default_instance_);
}
inline const ::frp::AddConnRsp& Msg::addconnrsp() const {
  // @@protoc_insertion_point(field_get:frp.Msg.addConnRsp)
  return _internal_addconnrsp();
}
inline void Msg::unsafe_arena_set_allocated_addconnrsp(
    ::frp::AddConnRsp* addconnrsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addconnrsp_);
  }
  addconnrsp_ = addconnrsp;
  if (addconnrsp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frp.Msg.addConnRsp)
}
inline ::frp::AddConnRsp* Msg::release_addconnrsp() {
  
  ::frp::AddConnRsp* temp = addconnrsp_;
  addconnrsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frp::AddConnRsp* Msg::unsafe_arena_release_addconnrsp() {
  // @@protoc_insertion_point(field_release:frp.Msg.addConnRsp)
  
  ::frp::AddConnRsp* temp = addconnrsp_;
  addconnrsp_ = nullptr;
  return temp;
}
inline ::frp::AddConnRsp* Msg::_internal_mutable_addconnrsp() {
  
  if (addconnrsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::frp::AddConnRsp>(GetArenaForAllocation());
    addconnrsp_ = p;
  }
  return addconnrsp_;
}
inline ::frp::AddConnRsp* Msg::mutable_addconnrsp() {
  ::frp::AddConnRsp* _msg = _internal_mutable_addconnrsp();
  // @@protoc_insertion_point(field_mutable:frp.Msg.addConnRsp)
  return _msg;
}
inline void Msg::set_allocated_addconnrsp(::frp::AddConnRsp* addconnrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete addconnrsp_;
  }
  if (addconnrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::frp::AddConnRsp>::GetOwningArena(addconnrsp);
    if (message_arena != submessage_arena) {
      addconnrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addconnrsp, submessage_arena);
    }
    
  } else {
    
  }
  addconnrsp_ = addconnrsp;
  // @@protoc_insertion_point(field_set_allocated:frp.Msg.addConnRsp)
}

// -------------------------------------------------------------------

// LoginReq

// .frp.Config config = 1;
inline bool LoginReq::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool LoginReq::has_config() const {
  return _internal_has_config();
}
inline void LoginReq::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::frp::Config& LoginReq::_internal_config() const {
  const ::frp::Config* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::frp::Config&>(
      ::frp::_Config_default_instance_);
}
inline const ::frp::Config& LoginReq::config() const {
  // @@protoc_insertion_point(field_get:frp.LoginReq.config)
  return _internal_config();
}
inline void LoginReq::unsafe_arena_set_allocated_config(
    ::frp::Config* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frp.LoginReq.config)
}
inline ::frp::Config* LoginReq::release_config() {
  
  ::frp::Config* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frp::Config* LoginReq::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:frp.LoginReq.config)
  
  ::frp::Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::frp::Config* LoginReq::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::frp::Config>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::frp::Config* LoginReq::mutable_config() {
  ::frp::Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:frp.LoginReq.config)
  return _msg;
}
inline void LoginReq::set_allocated_config(::frp::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::frp::Config>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:frp.LoginReq.config)
}

// -------------------------------------------------------------------

// LoginRsp

// int32 ret_code = 1;
inline void LoginRsp::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t LoginRsp::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t LoginRsp::ret_code() const {
  // @@protoc_insertion_point(field_get:frp.LoginRsp.ret_code)
  return _internal_ret_code();
}
inline void LoginRsp::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void LoginRsp::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:frp.LoginRsp.ret_code)
}

// string err_msg = 2;
inline void LoginRsp::clear_err_msg() {
  err_msg_.ClearToEmpty();
}
inline const std::string& LoginRsp::err_msg() const {
  // @@protoc_insertion_point(field_get:frp.LoginRsp.err_msg)
  return _internal_err_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRsp::set_err_msg(ArgT0&& arg0, ArgT... args) {
 
 err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frp.LoginRsp.err_msg)
}
inline std::string* LoginRsp::mutable_err_msg() {
  std::string* _s = _internal_mutable_err_msg();
  // @@protoc_insertion_point(field_mutable:frp.LoginRsp.err_msg)
  return _s;
}
inline const std::string& LoginRsp::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void LoginRsp::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRsp::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRsp::release_err_msg() {
  // @@protoc_insertion_point(field_release:frp.LoginRsp.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRsp::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frp.LoginRsp.err_msg)
}

// string client_id = 3;
inline void LoginRsp::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& LoginRsp::client_id() const {
  // @@protoc_insertion_point(field_get:frp.LoginRsp.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRsp::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frp.LoginRsp.client_id)
}
inline std::string* LoginRsp::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:frp.LoginRsp.client_id)
  return _s;
}
inline const std::string& LoginRsp::_internal_client_id() const {
  return client_id_.Get();
}
inline void LoginRsp::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRsp::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRsp::release_client_id() {
  // @@protoc_insertion_point(field_release:frp.LoginRsp.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRsp::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frp.LoginRsp.client_id)
}

// -------------------------------------------------------------------

// AddConnReq

// -------------------------------------------------------------------

// AddConnRsp

// int32 ret_code = 1;
inline void AddConnRsp::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t AddConnRsp::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t AddConnRsp::ret_code() const {
  // @@protoc_insertion_point(field_get:frp.AddConnRsp.ret_code)
  return _internal_ret_code();
}
inline void AddConnRsp::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void AddConnRsp::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:frp.AddConnRsp.ret_code)
}

// string err_msg = 2;
inline void AddConnRsp::clear_err_msg() {
  err_msg_.ClearToEmpty();
}
inline const std::string& AddConnRsp::err_msg() const {
  // @@protoc_insertion_point(field_get:frp.AddConnRsp.err_msg)
  return _internal_err_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddConnRsp::set_err_msg(ArgT0&& arg0, ArgT... args) {
 
 err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frp.AddConnRsp.err_msg)
}
inline std::string* AddConnRsp::mutable_err_msg() {
  std::string* _s = _internal_mutable_err_msg();
  // @@protoc_insertion_point(field_mutable:frp.AddConnRsp.err_msg)
  return _s;
}
inline const std::string& AddConnRsp::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void AddConnRsp::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddConnRsp::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddConnRsp::release_err_msg() {
  // @@protoc_insertion_point(field_release:frp.AddConnRsp.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddConnRsp::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frp.AddConnRsp.err_msg)
}

// -------------------------------------------------------------------

// Config

// .frp.ProxyConf proxyConf = 1;
inline bool Config::_internal_has_proxyconf() const {
  return this != internal_default_instance() && proxyconf_ != nullptr;
}
inline bool Config::has_proxyconf() const {
  return _internal_has_proxyconf();
}
inline void Config::clear_proxyconf() {
  if (GetArenaForAllocation() == nullptr && proxyconf_ != nullptr) {
    delete proxyconf_;
  }
  proxyconf_ = nullptr;
}
inline const ::frp::ProxyConf& Config::_internal_proxyconf() const {
  const ::frp::ProxyConf* p = proxyconf_;
  return p != nullptr ? *p : reinterpret_cast<const ::frp::ProxyConf&>(
      ::frp::_ProxyConf_default_instance_);
}
inline const ::frp::ProxyConf& Config::proxyconf() const {
  // @@protoc_insertion_point(field_get:frp.Config.proxyConf)
  return _internal_proxyconf();
}
inline void Config::unsafe_arena_set_allocated_proxyconf(
    ::frp::ProxyConf* proxyconf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxyconf_);
  }
  proxyconf_ = proxyconf;
  if (proxyconf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frp.Config.proxyConf)
}
inline ::frp::ProxyConf* Config::release_proxyconf() {
  
  ::frp::ProxyConf* temp = proxyconf_;
  proxyconf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frp::ProxyConf* Config::unsafe_arena_release_proxyconf() {
  // @@protoc_insertion_point(field_release:frp.Config.proxyConf)
  
  ::frp::ProxyConf* temp = proxyconf_;
  proxyconf_ = nullptr;
  return temp;
}
inline ::frp::ProxyConf* Config::_internal_mutable_proxyconf() {
  
  if (proxyconf_ == nullptr) {
    auto* p = CreateMaybeMessage<::frp::ProxyConf>(GetArenaForAllocation());
    proxyconf_ = p;
  }
  return proxyconf_;
}
inline ::frp::ProxyConf* Config::mutable_proxyconf() {
  ::frp::ProxyConf* _msg = _internal_mutable_proxyconf();
  // @@protoc_insertion_point(field_mutable:frp.Config.proxyConf)
  return _msg;
}
inline void Config::set_allocated_proxyconf(::frp::ProxyConf* proxyconf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proxyconf_;
  }
  if (proxyconf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::frp::ProxyConf>::GetOwningArena(proxyconf);
    if (message_arena != submessage_arena) {
      proxyconf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxyconf, submessage_arena);
    }
    
  } else {
    
  }
  proxyconf_ = proxyconf;
  // @@protoc_insertion_point(field_set_allocated:frp.Config.proxyConf)
}

// repeated .frp.LocalProxy localProxies = 2;
inline int Config::_internal_localproxies_size() const {
  return localproxies_.size();
}
inline int Config::localproxies_size() const {
  return _internal_localproxies_size();
}
inline void Config::clear_localproxies() {
  localproxies_.Clear();
}
inline ::frp::LocalProxy* Config::mutable_localproxies(int index) {
  // @@protoc_insertion_point(field_mutable:frp.Config.localProxies)
  return localproxies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frp::LocalProxy >*
Config::mutable_localproxies() {
  // @@protoc_insertion_point(field_mutable_list:frp.Config.localProxies)
  return &localproxies_;
}
inline const ::frp::LocalProxy& Config::_internal_localproxies(int index) const {
  return localproxies_.Get(index);
}
inline const ::frp::LocalProxy& Config::localproxies(int index) const {
  // @@protoc_insertion_point(field_get:frp.Config.localProxies)
  return _internal_localproxies(index);
}
inline ::frp::LocalProxy* Config::_internal_add_localproxies() {
  return localproxies_.Add();
}
inline ::frp::LocalProxy* Config::add_localproxies() {
  ::frp::LocalProxy* _add = _internal_add_localproxies();
  // @@protoc_insertion_point(field_add:frp.Config.localProxies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frp::LocalProxy >&
Config::localproxies() const {
  // @@protoc_insertion_point(field_list:frp.Config.localProxies)
  return localproxies_;
}

// -------------------------------------------------------------------

// LocalProxy

// .frp.Protocol protocol = 1;
inline void LocalProxy::clear_protocol() {
  protocol_ = 0;
}
inline ::frp::Protocol LocalProxy::_internal_protocol() const {
  return static_cast< ::frp::Protocol >(protocol_);
}
inline ::frp::Protocol LocalProxy::protocol() const {
  // @@protoc_insertion_point(field_get:frp.LocalProxy.protocol)
  return _internal_protocol();
}
inline void LocalProxy::_internal_set_protocol(::frp::Protocol value) {
  
  protocol_ = value;
}
inline void LocalProxy::set_protocol(::frp::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:frp.LocalProxy.protocol)
}

// string ip = 2;
inline void LocalProxy::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& LocalProxy::ip() const {
  // @@protoc_insertion_point(field_get:frp.LocalProxy.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalProxy::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frp.LocalProxy.ip)
}
inline std::string* LocalProxy::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:frp.LocalProxy.ip)
  return _s;
}
inline const std::string& LocalProxy::_internal_ip() const {
  return ip_.Get();
}
inline void LocalProxy::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocalProxy::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocalProxy::release_ip() {
  // @@protoc_insertion_point(field_release:frp.LocalProxy.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocalProxy::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frp.LocalProxy.ip)
}

// uint32 port = 3;
inline void LocalProxy::clear_port() {
  port_ = 0u;
}
inline uint32_t LocalProxy::_internal_port() const {
  return port_;
}
inline uint32_t LocalProxy::port() const {
  // @@protoc_insertion_point(field_get:frp.LocalProxy.port)
  return _internal_port();
}
inline void LocalProxy::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void LocalProxy::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:frp.LocalProxy.port)
}

// -------------------------------------------------------------------

// ProxyConf

// string ip = 1;
inline void ProxyConf::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& ProxyConf::ip() const {
  // @@protoc_insertion_point(field_get:frp.ProxyConf.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProxyConf::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frp.ProxyConf.ip)
}
inline std::string* ProxyConf::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:frp.ProxyConf.ip)
  return _s;
}
inline const std::string& ProxyConf::_internal_ip() const {
  return ip_.Get();
}
inline void ProxyConf::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProxyConf::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProxyConf::release_ip() {
  // @@protoc_insertion_point(field_release:frp.ProxyConf.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProxyConf::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frp.ProxyConf.ip)
}

// uint32 port = 2;
inline void ProxyConf::clear_port() {
  port_ = 0u;
}
inline uint32_t ProxyConf::_internal_port() const {
  return port_;
}
inline uint32_t ProxyConf::port() const {
  // @@protoc_insertion_point(field_get:frp.ProxyConf.port)
  return _internal_port();
}
inline void ProxyConf::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void ProxyConf::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:frp.ProxyConf.port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace frp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frp::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frp::MsgType>() {
  return ::frp::MsgType_descriptor();
}
template <> struct is_proto_enum< ::frp::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frp::Protocol>() {
  return ::frp::Protocol_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
